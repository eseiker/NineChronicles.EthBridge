{"version":3,"sources":["pages/ConnectWallet.tsx","components/TextField.tsx","pages/SwapWncg.tsx","App.tsx","index.tsx"],"names":["ConnectWalletPage","connect","onClick","TextField","onChange","label","others","labelLeft","event","undefined","target","value","SwapWncgPage","address","chain","useNetwork","contractAddress","useMemo","id","mainnet","ropsten","useBalance","addressOrName","token","data","isLoading","error","signer","useSigner","contract","useContract","contractInterface","erc20ABI","signerOrProvider","useState","ncAddress","setNcAddress","amount","setAmount","burnAmount","Decimal","mul","pow","className","readOnly","weight","span","toString","div","decimals","message","indexOf","isAddress","preventDefault","console","log","burn","BigNumber","from","repeat","then","debug","App","useAccount","isConnected","useConnect","connector","InjectedConnector","SwapWncg","ConnectWallet","client","createClient","autoConnect","provider","config","getDefaultProvider","chainId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAeeA,EAR6C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3D,OACI,cAAC,IAAD,CAAQC,QAAS,kBAAMD,KAAvB,6B,yFCAKE,EAAsC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,MAAUC,EAAa,oCACnF,OACI,8BACI,cAAC,IAAD,aAAOC,UAAWF,EAAOD,SAAU,SAAAI,QAA4BC,IAAbL,GAAwBA,EAASI,EAAME,OAAOC,SAAcL,O,SCkE3GM,EAjEmC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3CC,EAAUC,cAAVD,MAEFE,EAAkBC,mBAAgB,WACtC,OAAS,OAALH,QAAK,IAALA,OAAA,EAAAA,EAAOI,MAAOC,IAAQD,GACjB,8CACO,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOI,MAAOE,IAAQF,GACxB,6CAEA,+CAER,CAACJ,IAX6D,EAa9BO,YAAW,CAC5CC,cAAeT,EACfU,MAAOP,IAFDQ,EAbyD,EAazDA,KAAMC,EAbmD,EAanDA,UAAWC,EAbwC,EAaxCA,MAKXC,EAAWC,cAAjBJ,KACFK,EAAWC,YAAY,CAC3BR,cAAeN,EACfe,kBAAkB,CACd,oDADa,mBAEVC,MAEPC,iBAAkBN,IAzB6C,EA4B/BO,mBAAiB,IA5Bc,mBA4B1DC,EA5B0D,KA4B/CC,EA5B+C,OA6BrCF,mBAAiB,KA7BoB,mBA6B1DG,EA7B0D,KA6BlDC,EA7BkD,KA8B3DC,EAAatB,mBAAwB,WACzC,IACE,OAAO,IAAIuB,IAAQH,GAAU,KAAKI,IAAI,IAAID,IAAQ,IAAIE,IAAI,KAC1D,SACA,OAAO,QAER,CAACL,IAEJ,OACE,sBAAKM,UAAU,MAAf,UACE,cAAC,EAAD,CAAWtC,MAAO,mBAAoBM,MAAOK,EAAiB4B,UAAQ,IACtE,eAAC,IAAD,0BACEnB,EACI,cAAC,IAAD,2BACA,cAAC,IAAD,CAAMoB,OAAO,OAAOC,MAAM,EAA1B,cACarC,IAATe,EACM,IAAIgB,IAAQhB,EAAKb,MAAMoC,YAAYC,IAAI,IAAIR,IAAQ,IAAIE,IAAIlB,EAAKyB,WAAWF,WADjF,OAEMrB,QAFN,IAEMA,OAFN,EAEMA,EAAOwB,aAGvB,cAAC,EAAD,CAAW7C,MAAO,SAAUD,SAAUkC,IACtC,cAAC,EAAD,CAAWjC,MAAO,KAAMD,SAAUgC,IAEnB,OAAbP,GAAoC,OAAfU,IAA+D,IAAxCA,EAAWQ,WAAWI,QAAQ,MAAgBC,oBAAUjB,GAEhG,cAAC,IAAD,CAAQjC,QAAS,SAAAM,GACjBA,EAAM6C,iBACNC,QAAQC,IAAI1B,GACZA,EAAS2B,KAAKC,IAAUC,KAAKnB,EAAWQ,YAAaZ,EAAY,IAAIwB,OAAO,KAAKC,KAAKN,QAAQO,QAH9F,kBADA,cAAC,IAAD,CAAMhB,OAAQ,OAAd,oCCvCGiB,MAvBf,WAAgB,IAAD,EACoBC,cAAzBlD,EADK,EACLA,QAASmD,EADJ,EACIA,YACT/D,EAAYgE,YAAW,CAC7BC,UAAW,IAAIC,MADTlE,QAIR,OAAK+D,OAMWvD,IAAZI,EAEA,uEAKF,cAACuD,EAAD,CAAcvD,QAASA,IAXrB,cAACwD,EAAD,CAAmBpE,QAASA,KCN5BqE,EAASC,YAAa,CAC1BC,aAAa,EACbC,SAAU,SAAAC,GAAM,OAAIC,6BAAmBD,EAAOE,YAGhDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAaT,OAAQA,EAArB,SACE,cAAC,EAAD,UAINU,SAASC,eAAe,W","file":"static/js/main.4756a120.chunk.js","sourcesContent":["import { Button } from \"@nextui-org/react\";\nimport React from \"react\"\n\ninterface ConnectWalletPageProps {\n    connect: () => void;\n}\n\nconst ConnectWalletPage: React.FC<ConnectWalletPageProps> = ({ connect }) => {\n    return (\n        <Button onClick={() => connect()}>\n          Connect Wallet\n        </Button>\n    );\n}\n\nexport default ConnectWalletPage;\n","import { Input } from \"@nextui-org/react\";\n\nexport interface TextInputProps {\n    onChange?: (value: string) => void,\n    value?: string,\n    label: string,\n    readOnly?: boolean,\n}\n\nexport const TextField: React.FC<TextInputProps> = ({ onChange, label, ...others }) => {\n    return (\n        <div>\n            <Input labelLeft={label} onChange={event => { if (onChange !== undefined) onChange(event.target.value) }} {...others} />\n        </div>\n    )\n}\n","import { Button, Text } from \"@nextui-org/react\";\nimport Decimal from \"decimal.js\";\nimport { BigNumber } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { useState, useMemo } from \"react\";\nimport { erc20ABI, useBalance, useContract, useNetwork, useSigner } from \"wagmi\";\nimport { TextField } from \"../components/TextField\";\nimport { mainnet, ropsten } from 'wagmi/chains'\n\ninterface SwapWncgPageProps {\n    address: string,\n};\n\nconst SwapWncgPage: React.FC<SwapWncgPageProps> = ({ address }) => {\n  const { chain } = useNetwork();\n\n  const contractAddress = useMemo<string>(() => {\n    if (chain?.id === mainnet.id) {\n      return \"0xf203ca1769ca8e9e8fe1da9d147db68b6c919817\";\n    } else if (chain?.id === ropsten.id) {\n      return \"0xeaa982f3424338598738c496153e55b1df11f625\";\n    } else {\n      return \"0x5F2e568E7085Ce18fA7b68e13fd5C04e99F044C4\";\n    }\n  }, [chain]);\n\n  const { data, isLoading, error } = useBalance({\n    addressOrName: address,\n    token: contractAddress,\n  });\n\n  const { data: signer } = useSigner();\n  const contract = useContract({\n    addressOrName: contractAddress,\n    contractInterface: [\n        \"function burn(uint256 amount, bytes32 to) public\",\n        ...erc20ABI,\n    ],\n    signerOrProvider: signer,\n  });\n\n  const [ncAddress, setNcAddress] = useState<string>(\"\");\n  const [amount, setAmount] = useState<string>(\"0\");\n  const burnAmount = useMemo<Decimal | null>(() => {\n    try {\n      return new Decimal(amount || \"0\").mul(new Decimal(10).pow(18))\n    } catch {\n      return null;\n    }\n  }, [amount]);\n\n  return (\n    <div className=\"App\">\n      <TextField label={'Contract Address'} value={contractAddress} readOnly/>\n      <Text>Your wNCG : {\n        isLoading\n          ? <Text>ðŸ•‘</Text>\n          : <Text weight=\"bold\" span={true}>{\n                data !== undefined\n                    ? new Decimal(data.value.toString()).div(new Decimal(10).pow(data.decimals)).toString()\n                    : error?.message\n            }</Text>\n      }</Text>\n      <TextField label={'Amount'} onChange={setAmount}/>\n      <TextField label={'To'} onChange={setNcAddress}/>\n      {\n        contract === null || burnAmount === null || burnAmount.toString().indexOf(\".\") !== -1 || !isAddress(ncAddress)\n          ? <Text weight={\"bold\"}>Fill corret values</Text>\n          : <Button onClick={event => {\n            event.preventDefault();    \n            console.log(contract);\n            contract.burn(BigNumber.from(burnAmount.toString()), ncAddress + \"0\".repeat(24)).then(console.debug)\n          }}>Burn</Button>\n      }\n    </div>\n  );\n}\n\nexport default SwapWncgPage;\n","import { useAccount, useConnect } from 'wagmi';\nimport { InjectedConnector } from 'wagmi/connectors/injected'\nimport ConnectWalletPage from './pages/ConnectWallet';\nimport SwapWncgPage from './pages/SwapWncg';\n\nfunction App() {\n  const { address, isConnected } = useAccount();\n  const { connect } = useConnect({\n    connector: new InjectedConnector(),\n  });\n\n  if (!isConnected) {    \n    return (\n      <ConnectWalletPage connect={connect} />\n    );\n  }\n\n  if (address === undefined) {\n    return (\n      <b>Error occurred while fetching address.</b>\n    )\n  }\n\n  return (\n    <SwapWncgPage address={address} />\n  )\n}\n\nexport default App;\n","import { NextUIProvider } from '@nextui-org/react';\nimport { getDefaultProvider } from 'ethers';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createClient, WagmiConfig } from 'wagmi';\nimport App from './App';\n\nconst client = createClient({\n  autoConnect: true,\n  provider: config => getDefaultProvider(config.chainId),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <NextUIProvider>\n      <WagmiConfig client={client}>\n        <App />\n      </WagmiConfig>\n    </NextUIProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}